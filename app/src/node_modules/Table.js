/**
 * @author : Mario Juez (mario@mjuez.com)
 *
 * @license: GPL v3
 *     This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

"use strict";

const ToggleElement = require('ToggleElement');
const {dialog} = require('electron').remote;
const json2csv = require('json2csv');
const fs = require('fs');

class Table extends ToggleElement {

    constructor(){
        var element = document.createElement('TABLE');
        element.className = "table-striped";
        super(element);
        this.thead = document.createElement('THEAD');
        this.tbody = document.createElement('TBODY');
        element.appendChild(this.thead);
        element.appendChild(this.tbody);
    }

    addRow(rowData) {
        if(!this.thead.hasChildNodes()){
            this.setHeader(Object.keys(rowData));
        }

        let tr = document.createElement('TR');

        Object.keys(rowData).map((key) => {
            let td = document.createElement('TD');
            td.innerHTML = rowData[key];
            tr.appendChild(td);
        });

        this.tbody.appendChild(tr);
    }

    addRow(rowData, columnsFormat) {
        if(!this.thead.hasChildNodes()){
            var columns = [];
            Object.keys(columnsFormat).map((key) => {
                columns.push(columnsFormat[key].column_name);
            });
            this.setHeader(columns);
        }

        let tr = document.createElement('TR');

        Object.keys(columnsFormat).map((key) => {
            let td = document.createElement('TD');
            let value = rowData[columnsFormat[key].base_column];
            td.innerHTML = rowData[columnsFormat[key].base_column];
            tr.appendChild(td); 
        });

        this.tbody.appendChild(tr);
    }

    setHeader(keys) {
        let tr = document.createElement('TR');
        
        keys.map((key) => {
            let th = document.createElement('TH');
            th.innerHTML = key;
            tr.appendChild(th);
        });

        this.thead.appendChild(tr);
    }

    exportToCSV(){
        if(this.thead.hasChildNodes()){
            var fields = Array.from(this.thead.firstChild.children).map((child) => child.innerHTML);
            
            if(this.tbody.hasChildNodes()){
                var rows = Array.from(this.tbody.children).map((tr) => {
                    var row = {};
                    Object.keys(fields).map((key) => {
                        row[fields[key]] = tr.children[key].innerHTML;
                    });
                    return row;
                });

                dialog.showSaveDialog({
                    title: 'Export regions statistics',
                    type: 'normal',
                    filters: [{
                        name: 'CSV',
                        extensions: ['csv']
                    }]
                }, (filename) => {
                    let cont = json2csv({
                        data: rows,
                        fields: fields
                    });
                    fs.writeFile(filename, cont);
                });
            }
        }
    }
}

module.exports = Table;