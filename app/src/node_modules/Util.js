/**
 * @author : gherardo varando (gherardo.varando@gmail.com)
 *
 * @license: GPL v3
 *     This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

'use strict';

const fs = require('fs');
const {
    app
} = require('electron').remote;
const path = require('path');
const os = require('os');
const sizeOf = require('image-size');
const Tiff = require('Tiff');


class Util {
    constructor() {
        console.log("WARNING Util is just a container of static methods, null returned");
        return null;
    }



    static stringify(object) {
        if (object) {
            return (JSON.stringify(object).replace(/\u007D/g, '').replace(/\u007B/g, '').replace(/\u0022/g, ''));
        }
        return null;
    }

    static isNode() {
        if (typeof module !== 'undefined' && module.exports) {
            return true;
        } else {
            return false;
        }
    }

    static isElectron() {
        if (process.versions.electron) {
            return true;
        } else {
            return false;
        }
    }

    static merge(x, y) {
        for (let a in y) {
            x[a] = x[a] || y[a];
        }

    }

    static clone(obj) {
        return JSON.parse(JSON.stringify(obj));
    }

    static notifyOS(text) {
        var notif = new window.Notification(`${app.getName()}`, {
            body: text
        });
        notif.onclick = () => {
            ipcRenderer.send('focusWindow');
            toggleSidebar('map');
        }
    }

    static readJSON(filename, callback, error) {
        fs.readFile(filename, 'utf-8', function (err, data) {
            if (err) {
                error(err);
                return;
            }
            var obj = JSON.parse(data);
            callback(obj);
        });
    }

    static readJSONsync(filename, error) {
        let data;
        try {
            data = fs.readFileSync(filename, 'utf-8');
            return JSON.parse(data);
        } catch (err) {
            if (error) {
                error(err);
            }
            return null;
        }
    }

    /// dont know if should be here since we cant know if we have access to DOm objects
    static empty(parent, child) {
        if (parent) {
            if (child) {
                parent.removeChild(child);
                this.empty(parent, parent.firstChild);
            }
        }
    }

    static isIcon(icon) {
        if (icon) {
            if (icon.className) {
                if (icon.className.includes('fa') | icon.className.includes('icon')) return true;
            }
        }
        return false;
    }

    static icon(icon) {
        if (this.isIcon(icon)) return icon;
        if (typeof icon === 'string') {
            let ic;
            if (icon.includes('fa')) {
                ic = document.createElement('I');
                ic.className = icon;
            } else if (icon.includes('icon')) {
                ic = document.createElement('SPAN');
                ic.className = icon;
            } else {
                ic = document.createElement('SPAN');
            }
            return ic;
        } else {
            return document.createElement('DIV');
        }

    }

    static setOne(obj, x, l) {
        if (typeof obj[x] === 'undefined') {
            for (let i in l) {
                if (typeof obj[l[i]] != 'undefined') {
                    obj[x] = obj[l[i]];
                    break;
                }
            }

        }
        for (let i in l) {
            delete obj[l[i]];
        }
    }
}

Util.Layers = class {

    static createJSONConfiguration(filePath, destinationPath, next) {

        // if filepath.size > 1 -> folder.

        let promise = new Promise((resolve, reject) => {
            var height = 0;
            var width = 0;

            if (filePath.endsWith(".tif") || filePath.endsWith(".tiff")) {
                fs.readFile(filePath, (err, data) => {
                    if (!err) {
                        let tiffImage = new Tiff({ buffer: data });
                        tiffImage.setDirectory(0);
                        height = tiffImage.toCanvas().height;
                        width = tiffImage.toCanvas().width;
                        resolve(Math.max(height, width));
                    } else {
                        reject(err);
                    }
                });
            } else {
                let dim = sizeOf(filePath);
                height = dim.height;
                width = dim.width;
                resolve(Math.max(height, width));
            }
        });

        promise.then((siz) => {
            let filename = path.basename(filePath);

            let jsonConfig = {
                name: `centroid_${filename}`,
                author: os.userInfo().username,
                type: `pointsLayer`,
                tileSize: siz,
                size: siz, // (!) this will be different to tileSize when using a folder with many images.
                pointsUrlTemplate: `${destinationPath}${path.sep}points${path.sep}points_${filename}.csv`
            }

            next(jsonConfig);
        });
    }

}

Util.Image = class {

    static getTotalSlices(filePath) {
        if (filePath.endsWith(".tif") || filePath.endsWith(".tiff")) {
            let data = fs.readFileSync(filePath);
            let tiffImage = new Tiff({ buffer: data });
            return tiffImage.countDirectory();
        } else {
            // Only tiff images has more than one slice.
            return 1;
        }
    }

}

module.exports = Util;
