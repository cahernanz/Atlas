/**
 * @author : gherardo varando (gherardo.varando@gmail.com)
 *
 * @license: GPL v3
 *     This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

'use strict';

const ProgressBar = require('ProgressBar');
const storage = require('electron-json-storage');
const async = require('async');
const fs = require('fs');
const {
    Menu,
    MenuItem,
    app
} = require('electron').remote;
const {
    dialog
} = require('electron').remote;

const {
    ipcRenderer
} = require("electron");

const Util = require('Util');
const Evented = require('Evented');
const ToggleElement = require('ToggleElement');
const {
    TreeList,
    TreeListInput
} = require('TreeList');
const ListGroup = require('ListGroup');
const NavGroup = require('NavGroup');
const ButtonsContainer = require('ButtonsContainer');
const Sidebar = require('Sidebar');
const GuiExtension = require('GuiExtension');
const Workspace = require('Workspace');
const ExtensionsManager = require('ExtensionsManager');

class Header extends ToggleElement {
    constructor(element) {
        super(element);
        this.id = element.id;
        let actionsContainer;
        if (element.getElementsByClassName("toolbar-actions")[0]) {
            actionsContainer = element.getElementsByClassName("toolbar-actions")[0];
        } else {
            actionsContainer = document.createElement("DIV");
            actionsContainer.className = 'toolbar-actions';
            actionsContainer.id = "header-actions";
            this.element.appendChild(actionsContainer);
        }

        this.actionsContainer = new ButtonsContainer(actionsContainer);
    }

    setTitle(title) {
        let tl = this.element.getElementsByClassName('title')[0];
        if (tl) {
            tl.innerHTML = title;
        } else {
            tl = document.createElement('H1');
            tl.className = 'title';
            tl.innerHTML = title;
            let cont = this.element.getElementsByClassName('toolbar-actions')[0];
            if (cont) {
                this.element.insertBefore(tl, cont);
            } else {
                this.element.appendChild(tl);
            }
        }
    }

    addProgressBar() {
        this.progressBar = new ProgressBar(this.element);
    }
}






class Footer extends ToggleElement {
    constructor(element) {
        super(element);
    }
    addNotificationBar() {
        this.notificationBar = new ToggleElement(document.createElement('DIV'));
        this.notificationBar.element.className = 'pull-right';
        this.notificationBar.message = document.createElement('STRONG');
        this.notificationBar.element.appendChild(this.notificationBar.message);
        this.element.appendChild(this.notificationBar.element);
    }

    addProgressBar() {
        this.progressBar = new ProgressBar(this.element);
    }
}



class Gui extends Evented {
    constructor() {
        super(document.getElementsByTagName('BODY')[0]);

        let header = document.getElementsByClassName("toolbar-header")[0];
        header.id = "header";

        this.window = new ToggleElement(document.getElementsByClassName("window-content")[0]);

        this.header = new Header(header);
        this.header.addProgressBar();

        let main = document.getElementById('main');
        this.main = new ToggleElement(main);

        let footer = document.getElementsByClassName("toolbar-footer")[0];
        footer.id = "footer";
        this.footer = new Footer(footer);
        this.footer.addProgressBar();

        this.footer.addNotificationBar();
        this.on('notify', (arg) => {
            this.footer.notificationBar.message.innerHTML = arg.ev.detail;
        });

        this.extensions = {}; //initialise empty extensions
        this.subMenus = []
        this.menu(); //create the simple menu
        this.workspace = new Workspace(this);
        this.extensionsManager = new ExtensionsManager(this);
        this.extensionsManager.activate();
        this.extensionsManager.extensions.workspace = this.workspace;
        this.extensionsManager.addExtension(this.workspace);
    }

    notify(message) {
        this.fire('notify', message);
    }


    openDevTools() {
        ipcRenderer.send('openDevTools');
    }

    menu() {
        const menu = new Menu();
        const file = new Menu();
        const view = new Menu();
        view.append(new MenuItem({
            label: "Fullscreen",
            type: "normal",
            role: "togglefullscreen"
        }));
        view.append(new MenuItem({
            label: "Toggle DevTools",
            type: "normal",
            role: 'toggledevtools'
        }));
        view.append(new MenuItem({
            label: "Extensions manager",
            type: "normal",
            click: () => {
                this.extensionsManager.show();
            }
        }));
        view.append(new MenuItem({
            label: "Workspace",
            type: "normal",
            click: () => {
                this.workspace.show();
            }
        }));
        file.append(new MenuItem({
            label: "New workspace",
            type: "normal",
            accelerator: 'CmdOrCtrl+Shift+N',
            click: () => {
                if (this.workspace instanceof Workspace) {
                    this.workspace.newWorkspace();
                }
            }
        }));
        file.append(new MenuItem({
            label: "Open workspace",
            type: "normal",
            accelerator: 'CmdOrCtrl+Shift+O',
            click: () => {
                if (this.workspace instanceof Workspace) {
                    this.workspace.loadChecking();
                }
            }
        }));
        file.append(new MenuItem({
            label: "Save workspace",
            type: "normal",
            accelerator: 'CmdOrCtrl+S',
            click: () => {
                if (this.workspace instanceof Workspace) {
                    this.workspace.save(this.workspace.spaces.workspace.path);
                }
            }
        }));
        file.append(new MenuItem({
            label: "Save workspace as",
            type: "normal",
            accelerator: 'CmdOrCtrl+Shift+S',
            click: () => {
                if (this.workspace instanceof Workspace) {
                    this.workspace.save();
                }
            }
        }));
        file.append(new MenuItem({
            label: "Quit",
            type: "normal",
            accelerator: 'CmdOrCtrl+Q',
            click: () => {
                storage.set('workspace', this.workspace.spaces, (error) => {
                    app.quit();
                });
            }
        }));

        menu.append(new MenuItem({
            label: "File",
            type: "submenu",
            submenu: file
        }));
        menu.append(new MenuItem({
            label: "View",
            type: "submenu",
            submenu: view
        }));
        Menu.setApplicationMenu(menu);

    }

    addSubMenu(submenu) {
        let menu = Menu.getApplicationMenu();
        menu.append(submenu);
        this.subMenus.push(submenu);
        Menu.setApplicationMenu(menu);
    }

    removeSubmenu(submenu) {
        let idx = this.subMenus.indexOf(submenu);
        this.menu();
        this.subMenus.splice(idx, 1);
        this.menu();
        let menu = Menu.getApplicationMenu();
        this.subMenus.map((sub) => {
            menu.append(sub);
        });
        Menu.setApplicationMenu(menu);
    }



}





if (typeof module !== 'undefined' && module.exports) {
    module.exports = Gui;
}
