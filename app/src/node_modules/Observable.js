/**
 * @author : Mario Juez (mario@mjuez.com)
 *
 * @license: GPL v3
 *     This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

'use strict'

class Observable {
    constructor() {
        this.eventListeners = new Map();
    }

    addEventListener(eventName, callback) {
        if (!this.eventListeners.has(eventName)) {
            this.eventListeners.set(eventName, []);
        }
        this.eventListeners.get(eventName).push(callback);
    }

    removeEventListener(eventName, callback) {
        let listeners = this.eventListeners.get(eventName);
        let index;

        if (listeners && listeners.length) {
            index = listeners.reduce((i, listener, index) => {
                return (isFunction(listener) && listener === callback) ?
                    i = index :
                    i;
            }, -1);

            if (index > -1) {
                listeners.splice(index, 1);
                this.eventListeners.set(eventName, listeners);
                return true;
            }
        }
        return false;
    }

    fire(eventName) {
        let listeners = this.eventListeners.get(eventName);
        if (listeners && listeners.length > 0) {
            listeners.forEach((listener) => {
                listener();
            })
            return true;
        }
        return false;
    }
}

module.exports = Observable;