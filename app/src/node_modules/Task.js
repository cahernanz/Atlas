/**
 * @author : Mario Juez (mario@mjuez.com)
 *
 * @license: GPL v3
 *     This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

'use strict';

const {MenuItem} = require('electron').remote;
const EventEmitter = require('events');

/**
 * Task.js
 */
class Task {

    constructor(name, details, gui) {
        this.taskManager = require('TaskManager');
        this.name = name;
        this.details = details;
        this.gui = gui;
        this.completed = false;
        this.finishTime = null;
        this.time = null;
        this.id = null;
        this._createDOMElement();
    }

    run() {
        this.time = process.hrtime();
        this.taskManager.addTask(this);
    }

    complete(){
        this.time = process.hrtime(this.time);
        this.finishTime = new Date();
        this.taskInfo.innerHTML += `<br />Task completed in: ${this.time[0]}s. On: ${this.finishTime}`;
        this.completed = true;
    }

    cancel(){
        if(this.id != null){
            this.taskManager.removeTask(this.id);
        }
    }

    _createDOMElement() {
        this.DOMElement = document.createElement('DIV');
        this.DOMElement.className = 'task';
        this.taskInfo = document.createElement('DIV');
        this.taskInfo.className = 'info';
        this.taskInfo.innerHTML = `<strong>${this.name}</strong><br />${this.details}`;

        let taskActions = document.createElement('DIV');
        taskActions.className = 'actions';

        let taskActionsInnerContainer = document.createElement('DIV');
        taskActionsInnerContainer.className = 'inner-container';

        this.customActions = document.createElement('DIV');
        this.customActions.className = 'custom-actions';
        let spinner = document.createElement('I');
        spinner.className = "fa fa-spinner fa-spin fa-2x fa-fw";
        this.customActions.appendChild(spinner);

        let cancelContainer = document.createElement('DIV');
        cancelContainer.className = 'cancel';
        let btnCancel = document.createElement('BUTTON');
        btnCancel.className = "btn btn-large btn-negative";
        btnCancel.innerHTML = '<i class="fa fa-ban" aria-hidden="true"></i>';
        btnCancel.onclick = () => {
            this.cancel();
        }
        cancelContainer.appendChild(btnCancel);

        taskActionsInnerContainer.appendChild(this.customActions);
        taskActionsInnerContainer.appendChild(cancelContainer);
        
        taskActions.appendChild(taskActionsInnerContainer);

        this.DOMElement.appendChild(this.taskInfo);
        this.DOMElement.appendChild(taskActions);
    }

    showActions() {
        if (this.completed) {
            this.clean(this.customActions);
            this.customActions.appendChild(this.DOMActions());
        }
    }

    DOMActions() {
        let actions = document.createElement('DIV');
        actions.className = 'actions';
        return actions;
    }

    clean(element) {
        while (element.firstChild) {
            element.removeChild(element.firstChild);
        }
    }

}

const Modal = require('Modal');
const Grid = require('Grid');
const ButtonsContainer = require('ButtonsContainer');
const Input = require('Input');

Task.Utils = class {

    static showMapSelector(gui, jsonFile) {
        var modal = new Modal({
            title: "Choose map:",
            height: "auto"
        });

        let grid = new Grid(1, 2);

        let mapPageExtension = gui.extensionsManager.extensions.mapPage;
        let maps = mapPageExtension.maps;
        let choices = {};
        if (maps) {
            Object.keys(maps).map((key) => {
                choices[key] = maps[key].name;
            });
        }

        let selMap = Input.selectInput({
            label: "Map",
            choices: choices,
            className: "simple form-control"
        });
        let lblMap = document.createElement("LABEL");
        lblMap.innerHTML = "Destination map: ";
        grid.addElement(lblMap, 0, 0);
        grid.addElement(selMap, 0, 1);

        let buttonsContainer = new ButtonsContainer(document.createElement("DIV"));
        buttonsContainer.addButton({
            id: "OkAddLayer00",
            text: "Cancel",
            action: () => {
                modal.destroy();
            },
            className: "btn-default"
        });
        buttonsContainer.addButton({
            id: "OkAddLayer00",
            text: "Ok",
            action: () => {
                if (jsonFile && Object.keys(maps).length) {
                    mapPageExtension.switchMap(maps[selMap.value]);
                    mapPageExtension.addLayerFile(jsonFile);
                    let selected = selMap.options[selMap.selectedIndex].text;
                    gui.notify(`Added layer to map ${selected}.`);
                }else{
                    gui.notify(`Error adding layer.`);
                }
                modal.destroy();
            },
            className: "btn-default"
        });
        let footer = document.createElement('DIV');
        footer.appendChild(buttonsContainer.element);

        modal.addBody(grid.element);
        modal.addFooter(footer);
        modal.show();
    }

}

module.exports = Task;