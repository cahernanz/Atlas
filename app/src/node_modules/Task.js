/**
 * @author : Mario Juez (mario@mjuez.com)
 *
 * @license: GPL v3
 *     This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

'use strict';

const {MenuItem, dialog} = require('electron').remote;
const EventEmitter = require('events');
const Modal = require('Modal');
const Grid = require('Grid');
const ButtonsContainer = require('ButtonsContainer');
const ProgressBar = require('ProgressBar');
const Input = require('Input');
const dateFormat = require('dateformat');

/**
 * A generic Task.
 */
class Task extends EventEmitter {

    /**
     * Creates a Task.
     * @param {name} Task name.
     * @param {details} Task details.
     * @param {gui} Gui to interact with. 
     */
    constructor(name, details, gui) {
        super();
        this.id = null;
        this.name = name;
        this.details = details;
        this.gui = gui;
        this.status = Task.Status.CREATED;
        this.progress = 0;
        this.startTime = null;
        this.finishTime = null;
        this.customAction = {};
    }

    /**
     * Runs the task. A task can be executed only once, after being created.
     * @return {boolean} If status changed.
     */
    run() {
        if (this.status === Task.Status.CREATED) {
            this.startTime = new Date();
            this.status = Task.Status.RUNNING;
            this.emit("run");
            return true;
        }
        return false;
    }

    /**
     * Updates task status to COMPLETED if the task
     * is currently running.
     * @return {boolean} If status changed.
     */
    success() {
        if (this.status === Task.Status.RUNNING) {
            this.finishTime = new Date();
            this.status = Task.Status.COMPLETED;
            this.emit("success");
            return true;
        }
        return false;
    }

    /**
     * Updates task status to FAILED if the task
     * is currently running.
     * @param {message} Failure information.
     * @return {boolean} If status changed.
     */
    fail(message) {
        if (this.status === Task.Status.RUNNING) {
            this.finishTime = new Date();
            this.status = Task.Status.FAILED;
            this.failureInfo = message;
            this.emit("fail");
            return true;
        }
        return false;
    }

    /**
     * Updates task status to CANCELLED if the task
     * is currently running.
     * @return {boolean} If status changed.
     */
    cancel() {
        if (this.status === Task.Status.RUNNING) {
            this.finishTime = new Date();
            this.status = Task.Status.CANCELLED;
            this.emit("cancel");
            return true;
        }
        return false;
    }

    /**
     * Updates task progress if the task is currently running.
     */
    updateProgress(newProgress) {
        if (this.status === Task.Status.RUNNING) {
            if (newProgress <= 100) {
                this.progress = newProgress;
            } else {
                this.progress = 100;
            }
            this.emit("progress");
        }
    }

    /*_createDOMElement() {
        this.DOMElement = document.createElement('DIV');
        this.DOMElement.className = 'task';
        this.taskInfo = document.createElement('DIV');
        this.taskInfo.className = 'info';
        this.taskInfo.innerHTML = `<strong>${this.name}</strong><br />${this.details}`;

        let taskActions = document.createElement('DIV');
        taskActions.className = 'actions';

        let taskActionsInnerContainer = document.createElement('DIV');
        taskActionsInnerContainer.className = 'inner-container';

        this.customActions = document.createElement('DIV');
        this.customActions.className = 'custom-actions';
        let spinner = document.createElement('I');
        spinner.className = "fa fa-spinner fa-spin fa-2x fa-fw";
        this.customActions.appendChild(spinner);

        let cancelContainer = document.createElement('DIV');
        cancelContainer.className = 'cancel';
        let btnCancel = document.createElement('BUTTON');
        btnCancel.className = "btn btn-large btn-negative";
        btnCancel.innerHTML = '<i class="fa fa-ban" aria-hidden="true"></i>';
        btnCancel.onclick = () => {
            this.cancel();
        }
        cancelContainer.appendChild(btnCancel);

        taskActionsInnerContainer.appendChild(this.customActions);
        taskActionsInnerContainer.appendChild(cancelContainer);

        taskActions.appendChild(taskActionsInnerContainer);

        this.DOMElement.appendChild(this.taskInfo);
        this.DOMElement.appendChild(taskActions);
    }

    showActions() {
        this.clean(this.customActions);
        this.customActions.appendChild(this.DOMActions());
    }

    DOMActions() {
        let actions = document.createElement('DIV');
        actions.className = 'actions';
        return actions;
    }

    clean(element) {
        while (element.firstChild) {
            element.removeChild(element.firstChild);
        }
    }*/

}

/**
 * Task statuses enum.
 */
Task.Status = {
    CREATED: 0,
    RUNNING: 1,
    COMPLETED: 2,
    CANCELLED: 3,
    FAILED: 4
}

Task.TaskDOMElement = class {

    constructor(task) {
        this.task = task;

        let openDetails = () => {
            if (this.additionalInfoContainer.classList.contains("open")) {
                this.additionalInfoContainer.classList.remove("open");
            } else {
                this.additionalInfoContainer.classList.add("open");
            }
        };

        this.element = document.createElement("DIV");
        this.element.className = "task-container";
        this.mainInfoContainer = document.createElement("DIV");
        this.mainInfoContainer.className = "main-info-container";

        this.statusIconContainer = document.createElement("DIV");
        this.statusIconContainer.className = "status-icon-container";
        this.statusIconContainer.onclick = openDetails;
        this.statusIcon = document.createElement("I");
        this.statusIconContainer.appendChild(this.statusIcon);
        this.mainInfoContainer.appendChild(this.statusIconContainer);

        this.middleContainer = document.createElement("DIV");
        this.middleContainer.className = "middle-container";
        this.middleContainer.onclick = openDetails;

        this.taskDataTableContainer = document.createElement("DIV");
        this.taskDataTableContainer.className = "task-data-table-container";
        this.taskDataContainer = document.createElement("DIV");
        this.taskDataContainer.className = "task-data-container";
        this.nameContainer = document.createElement("DIV");
        this.nameContainer.className = "name-container";
        this.nameContainer.innerHTML = task.name;
        this.taskDataContainer.appendChild(this.nameContainer);

        this.detailsContainer = document.createElement("DIV");
        this.detailsContainer.className = "details-container";
        this.detailsContainer.innerHTML = task.details;
        this.taskDataContainer.appendChild(this.detailsContainer);
        this.taskDataTableContainer.appendChild(this.taskDataContainer);

        this.actionButtonContainer = document.createElement("DIV");
        this.actionButtonContainer.className = "action-button-container";
        this.taskDataTableContainer.appendChild(this.actionButtonContainer);
        this.middleContainer.appendChild(this.taskDataTableContainer);

        this.progressBar = new ProgressBar(this.middleContainer);
        this.mainInfoContainer.appendChild(this.middleContainer);

        this.cancelContainer = document.createElement("DIV");
        this.cancelContainer.className = "cancel-container";
        this.btnCancel = document.createElement("I");
        this.btnCancel.className = "fa fa-times-circle fa-2x";
        this.btnCancel.onclick = () => {
            dialog.showMessageBox({
                title: 'Warning!',
                type: 'warning',
                buttons: ['No', "Yes"],
                message: `This action cannot be undone. Continue?`,
                noLink: true
            }, (id) => {
                if (id > 0) {
                    if (!this.task.cancel()) {
                        this.task.emit("remove");
                    }
                }
            });
        };
        this.cancelContainer.appendChild(this.btnCancel);
        this.mainInfoContainer.appendChild(this.cancelContainer);
        this.element.appendChild(this.mainInfoContainer);

        this.additionalInfoContainer = document.createElement("DIV");
        this.additionalInfoContainer.className = "additional-info-container";
        this.additionalInfoGrid = new Grid(2, 4);
        this.statusElement = document.createElement("DIV");
        this.additionalInfoGrid.addElement(this.statusElement);
        this.failureInfoElement = document.createElement("DIV");
        this.additionalInfoGrid.addElement(this.failureInfoElement);

        this.additionalInfoContainer.appendChild(this.additionalInfoGrid.element);
        this.element.appendChild(this.additionalInfoContainer);

        this.configureByStatus();
        this._bindEventListeners();
    }

    configureByStatus() {
        this.statusElement.innerHTML = "<strong>Status: </strong>";

        switch (this.task.status) {
            case Task.Status.CREATED:
                this.statusElement.innerHTML += "CREATED";
                this.statusIcon.className = "fa fa-cogs fa-2x";
                break;
            case Task.Status.RUNNING:
                this.statusElement.innerHTML += "RUNNING";
                this.statusIcon.className = "fa fa-circle-o-notch fa-spin fa-2x";
                break;
            case Task.Status.COMPLETED:
                this.statusElement.innerHTML += "COMPLETED";
                this.statusIcon.className = "fa fa-check fa-2x completed";
                break;
            case Task.Status.FAILED:
                this.statusElement.innerHTML += "FAILED";
                this.failureInfoElement.innerHTML = this.task.failureInfo;
                this.statusIcon.className = "fa fa-exclamation-triangle fa-2x wrong";
                break;
            case Task.Status.CANCELLED:
                this.statusElement.innerHTML += "CANCELLED";
                this.statusIcon.className = "fa fa-exclamation-triangle fa-2x wrong";
                break;
        }
    }

    addAditionalInformation(additionalInformation) {
        this.additionalInfoGrid.addElement(additionalInformation);
    }

    _addActionButton() {
        let actionButton = document.createElement("BUTTON");
        actionButton.innerHTML = this.task.customAction["caption"];
        actionButton.className = "btn btn-positive";
        actionButton.onclick = this.task.customAction["onclick"];
        this.actionButtonContainer.appendChild(actionButton);
    }

    _bindEventListeners() {
        let format = "mm/dd/yy HH:MM:ss";

        this.task.on("run", () => {
            this.configureByStatus();
            let startTimeContainer = document.createElement("DIV");
            startTimeContainer.innerHTML = `<strong>Started on: </strong>${dateFormat(this.task.startTime, format)}`;
            this.addAditionalInformation(startTimeContainer);
        });

        this.task.on("success", () => {
            this.configureByStatus();
            let finishTimeContainer = document.createElement("DIV");
            finishTimeContainer.innerHTML = `<strong>Finished on: </strong>${dateFormat(this.task.finishTime, format)}`;
            this.addAditionalInformation(finishTimeContainer);
            let l = Object.keys(this.task.customAction).length;
            if (Object.keys(this.task.customAction).length > 0) {
                this._addActionButton();
            }
        });

        this.task.on("fail", () => {
            this.configureByStatus();
            let failTimeContainer = document.createElement("DIV");
            failTimeContainer.innerHTML = `<strong>Failed on: </strong>${dateFormat(this.task.finishTime, format)}`;
            this.addAditionalInformation(failTimeContainer);
        });

        this.task.on("cancel", () => {
            this.configureByStatus();
            let cancelTimeContainer = document.createElement("DIV");
            cancelTimeContainer.innerHTML = `<strong>Cancelled on: </strong>${dateFormat(this.task.finishTime, format)}`;
            this.addAditionalInformation(cancelTimeContainer);
        });

        this.task.on("progress", () => {
            this.progressBar.setBar(this.task.progress);
        });
    }

}

Task.Utils = class {

    static showMapSelector(gui, jsonFile) {
        var modal = new Modal({
            title: "Choose map:",
            height: "auto"
        });

        let grid = new Grid(1, 2);

        let mapPageExtension = gui.extensionsManager.extensions.mapPage;
        let maps = mapPageExtension.maps;
        let choices = {};
        if (maps) {
            Object.keys(maps).map((key) => {
                choices[key] = maps[key].name;
            });
        }

        let selMap = Input.selectInput({
            label: "Map",
            choices: choices,
            className: "simple form-control"
        });
        let lblMap = document.createElement("LABEL");
        lblMap.innerHTML = "Destination map: ";
        grid.addElement(lblMap, 0, 0);
        grid.addElement(selMap, 0, 1);

        let buttonsContainer = new ButtonsContainer(document.createElement("DIV"));
        buttonsContainer.addButton({
            id: "OkAddLayer00",
            text: "Cancel",
            action: () => {
                modal.destroy();
            },
            className: "btn-default"
        });
        buttonsContainer.addButton({
            id: "OkAddLayer00",
            text: "Ok",
            action: () => {
                if (jsonFile && Object.keys(maps).length) {
                    mapPageExtension.switchMap(maps[selMap.value]);
                    mapPageExtension.addLayerFile(jsonFile);
                    let selected = selMap.options[selMap.selectedIndex].text;
                    gui.notify(`Added layer to map ${selected}.`);
                } else {
                    gui.notify(`Error adding layer.`);
                }
                modal.destroy();
            },
            className: "btn-default"
        });
        let footer = document.createElement('DIV');
        footer.appendChild(buttonsContainer.element);

        modal.addBody(grid.element);
        modal.addFooter(footer);
        modal.show();
    }

}

module.exports = Task;