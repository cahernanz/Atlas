/**
 * @author : Mario Juez (mario@mjuez.com)
 *
 * @license: GPL v3
 *     This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

'use strict';

const path = require('path');
const Task = require('Task');
const Util = require('Util');
const Modal = require('Modal');
const Input = require('Input');
const Grid = require('Grid');
const FolderSelector = require('FolderSelector');
const ButtonsContainer = require('ButtonsContainer');
const MapIO = require('../extensions/mapPage/_modules/MapIO.js');
const ChildProcess = require('child_process').ChildProcess;

class MapCreatorTask extends Task {

    constructor(details, isMap, gui) {
        let name = "ImageJ MapCreator";
        super(name, details, gui);
        this.imageJExtension = gui.extensionsManager.extensions.imagej;
        this.macro = "MapCreator";
        this.isMap = isMap;
        this.jsonMap = null;
        this.childProcess = null;
    }

    run(runPath) {
        super.run();
        this.showModal(runPath, (modal, params) => {
            let use = "";
            let create = "";
            if (params.use) use = "use ";
            if (this.isMap) create = "create ";

            let args = `"${runPath}#map=${params.map} pixel=${params.pixel} maximum=${params.maximum} slice=${params.slice} ${use}${create}choose=${params.path}#${params.merge}"`;
            this.childProcess = this.imageJExtension.run(this.macro, args, (err, stdout) => {
                let notification = `Map creator task (${this.details}) completed`;
                Util.notifyOS(notification);
                this.gui.notify(notification);
                this.jsonMap = path.join(params.path, params.map, `${params.map}.json`);
                this.completed = true;
                this.emit("complete");
            });

            this.gui.notify(`MapCreator task started.`);
            modal.destroy();
        });
    }

    cancel(){
        if(this.childProcess instanceof ChildProcess){
            this.childProcess.kill();
            this.taskManager.removeTask(this.id);
        }
    }

    DOMActions() {
        let actions = super.DOMActions();
        let buttonsContainer = new ButtonsContainer(document.createElement("DIV"));
        buttonsContainer.addButton({
            id: "LoadMap00",
            text: "Load map to workspace",
            action: () => {
                MapIO.loadMap([this.jsonMap], (conf) => {
                    this.gui.extensionsManager.extensions.mapPage.addNewMap(conf);
                });
            },
            className: "btn btn-large btn-positive"
        });
        actions.appendChild(buttonsContainer.element);
        return actions;
    }

    showModal(imagePath, next) {
        var modal = new Modal({
            title: "Map creator options",
            height: "auto"
        });

        let body = document.createElement("DIV");
        body.className = "padded";
        let grid = new Grid(7, 2);

        let txtMapName = Input.input({
            type: "text",
            id: "txtmapname",
            value: "map"
        });
        let lblMapName = document.createElement("LABEL");
        lblMapName.htmlFor = "txtmapname";
        lblMapName.innerHTML = "Map name: ";
        grid.addElement(lblMapName, 0, 0);
        grid.addElement(txtMapName, 0, 1);

        let txtPixelTiles = Input.input({
            type: "text",
            id: "txtpixeltiles",
            value: "256"
        });
        let lblPixelTiles = document.createElement("LABEL");
        lblPixelTiles.htmlFor = "txtpixeltiles";
        lblPixelTiles.innerHTML = "Pixel tiles dimension: ";
        grid.addElement(lblPixelTiles, 1, 0);
        grid.addElement(txtPixelTiles, 1, 1);

        let numMaximumZoom = Input.input({
            type: "number",
            id: "nummaximumzoom",
            value: "5",
            min: "0",
            max: "8"
        });
        let lblMaximumZoom = document.createElement("LABEL");
        lblMaximumZoom.htmlFor = "nummaximumzoom";
        lblMaximumZoom.innerHTML = "Maximum zoom: ";
        grid.addElement(lblMaximumZoom, 2, 0);
        grid.addElement(numMaximumZoom, 2, 1);

        let numSlices = Util.Image.getTotalSlices(imagePath);

        let checkUseAllSlice = Input.input({
            type: "checkbox",
            id: "useallslice",
            onchange: (e) => {
                checkMergeAllSlices.disabled = checkUseAllSlice.checked;
                numUsedSlice.disabled = checkUseAllSlice.checked;
            }
        });
        let lblUseAllSlice = document.createElement("LABEL");
        lblUseAllSlice.htmlFor = "useallslice";
        lblUseAllSlice.innerHTML = "Use all slice: ";
        grid.addElement(lblUseAllSlice, 3, 0);
        grid.addElement(checkUseAllSlice, 3, 1);

        let checkMergeAllSlices = Input.input({
            type: "checkbox",
            id: "mergeallslices",
            onchange: (e) => {
                checkUseAllSlice.disabled = checkMergeAllSlices.checked;
                numUsedSlice.disabled = checkMergeAllSlices.checked;
            }
        });
        let lblMergeAllSlices = document.createElement("LABEL");
        lblMergeAllSlices.htmlFor = "mergeallslices";
        lblMergeAllSlices.innerHTML = "Merge all slices: ";
        grid.addElement(lblMergeAllSlices, 4, 0);
        grid.addElement(checkMergeAllSlices, 4, 1);

        if (numSlices == 1) {
            checkMergeAllSlices.disabled = true;
            checkUseAllSlice.disabled = true;
        }

        let numUsedSlice = Input.input({
            type: "number",
            id: "numusedslice",
            value: "1",
            min: "1",
            max: numSlices
        });
        let lblUsedSlice = document.createElement("LABEL");
        lblUsedSlice.htmlFor = "numusedslice";
        lblUsedSlice.innerHTML = "Slice to be used: ";
        grid.addElement(lblUsedSlice, 5, 0);
        grid.addElement(numUsedSlice, 5, 1);

        let fldOutputFolder = new FolderSelector("fileoutputfolder");
        let lblOutputFolder = document.createElement("LABEL");
        lblOutputFolder.htmlFor = "fileoutputfolder";
        lblOutputFolder.innerHTML = "Output folder: ";
        grid.addElement(lblOutputFolder, 6, 0);
        grid.addElement(fldOutputFolder.element, 6, 1);

        let buttonsContainer = new ButtonsContainer(document.createElement("DIV"));
        buttonsContainer.addButton({
            id: "CancelMap00",
            text: "Cancel",
            action: () => {
                this.taskManager.removeTask(this.id);
                modal.destroy();
            },
            className: "btn-default"
        });
        buttonsContainer.addButton({
            id: "CreateMap00",
            text: "Create",
            action: () => {
                if (typeof next === 'function') {
                    if (fldOutputFolder.getFolderRoute()) {
                        let params = {
                            map: txtMapName.value || "[]",
                            pixel: txtPixelTiles.value || "[]",
                            maximum: numMaximumZoom.value || "[]",
                            slice: numUsedSlice.value || "[]",
                            use: checkUseAllSlice.checked,
                            merge: checkMergeAllSlices.checked,
                            path: fldOutputFolder.getFolderRoute()
                        }
                        next(modal, params);
                    } else {
                        dialog.showErrorBox("Can't create map", "You must choose an output folder.");
                    }
                }
            },
            className: "btn-default"
        });
        let footer = document.createElement('DIV');
        footer.appendChild(buttonsContainer.element);

        modal.addBody(grid.element);
        modal.addFooter(footer);
        modal.show();
    }

}

module.exports = MapCreatorTask;