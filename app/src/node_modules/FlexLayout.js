'use strict';

const ToggleElement = require('ToggleElement');
const Util = require('Util');

class FlexLayout extends ToggleElement {

    /**
     * 
     * @param {*} parent 
     * @param {*} type 
     * @param {*} firstContainerSize 
     */
    constructor(parent, type, firstContainerSize) {
        let element = Util.div(null, 'flex-layout');
        super(element);

        let isDragging = false;

        this.firstContainer = Util.div();
        element.appendChild(this.firstContainer);

        let drag = Util.div();
        drag.appendChild(Util.div(null, 'line'));
        element.appendChild(drag);

        this.lastContainer = Util.div();
        element.appendChild(this.lastContainer);

        if (type === FlexLayout.Type.HORIZONTAL) {
            this.firstContainer.className = 'horizontal-container';
            this.firstContainer.style.width = `${firstContainerSize}%`;
            this.lastContainer.className = 'horizontal-container right';
            this.lastContainer.style.width = `${100 - firstContainerSize}%`;
            drag.className = 'drag-h';
        } else if (type === FlexLayout.Type.VERTICAL) {
            this.firstContainer.className = 'vertical-container';
            this.firstContainer.style.height = `${firstContainerSize}%`;
            this.lastContainer.className = 'vertical-container bottom';
            this.lastContainer.style.height = `${100 - firstContainerSize}%`;
            drag.className = 'drag-v';
        }

        parent.appendChild(element);

        //
        // EVENTS
        //

        drag.onmousedown = () => {
            isDragging = true;
            if (type === FlexLayout.Type.HORIZONTAL) {
                this.firstContainer.style.cursor = 'col-resize';
                this.lastContainer.style.cursor = 'col-resize';
            } else if (type === FlexLayout.Type.VERTICAL) {
                this.firstContainer.style.cursor = 'row-resize';
                this.lastContainer.style.cursor = 'row-resize';
            }
        };

        element.onmousemove = (e) => {
            if (isDragging) {
                let sumPercentages = this.firstContainer + this.lastContainer;
                let elemRect = element.getBoundingClientRect();
                if (type === FlexLayout.Type.HORIZONTAL) {
                    let percentageLeft = ((e.pageX - elemRect.left) / element.offsetWidth) * 100;
                    let percentageRight = 100 - percentageLeft;
                    if (percentageRight > 4 && percentageRight < 94) {
                        this.firstContainer.style.width = `${percentageLeft}%`;
                        this.lastContainer.style.width = `${percentageRight}%`;
                    }
                } else if (type === FlexLayout.Type.VERTICAL) {
                    let percentageTop = ((e.pageY - elemRect.top) / element.offsetHeight) * 100;
                    let percentageBottom = 100 - percentageTop;
                    if (percentageBottom > 4 && percentageBottom < 96) {
                        this.firstContainer.style.height = `${percentageTop}%`;
                        this.lastContainer.style.height = `${percentageBottom}%`;
                    }
                }
            }
        };

        document.onmouseup = () => {
            if (isDragging) {
                this.firstContainer.style.cursor = null;
                this.lastContainer.style.cursor = null;
                isDragging = false;
            }
        };
    }

    appendToFirstContainer(element){
        this.firstContainer.appendChild(element);
    }

    appendToLastContainer(element){
        this.lastContainer.appendChild(element);
    }
}

FlexLayout.Type = {
    HORIZONTAL: 0,
    VERTICAL: 1
}

module.exports = FlexLayout;