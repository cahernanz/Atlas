/**
 * @author : gherardo varando (gherardo.varando@gmail.com)
 *
 * @license: GPL v3
 *     This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.


 */

"use strict";
const GuiExtension = require('GuiExtension');
const Sidebar = require('Sidebar');
const ToggleElement = require('ToggleElement');

class ExtensionsManager extends GuiExtension {


    constructor(gui) {
        super(gui);
        this.extensions = {};
    }

    activate() {
        this.sidebar = new Sidebar(this.element);
        this.sidebar.addList();
        this.sidebar.hide();
        this.sidebar.list.addSearch({
            placeholder: 'Search extension'
        });

        //here put actions to load a new extension from custom file.
        this.pane = new ToggleElement(document.createElement('DIV'));
        this.element.appendChild(this.pane.element);

    }


    deactivate() {
      this.clear();
      super.deactivate();

    }

    // find possible paths like Gui_Extensions folder in process.resourcesPath and __dirname and user defined folders etc...
    getExtensionsPaths() {
        let paths = [];
        paths.push(`${process.resourcesPath}/GuiExtensions/`);
        if (typeof this.userExtensionsPath === 'string') {
            paths.push(this.userExtensionsPath);
        } else if (this.userExtensionsPath instanceof Array) {
            this.userExtensionsPath.map((x) => {
                paths.push(x);
            });
        }
        return (paths)
    }

    getExtensionsFromPath(path, callback) {
        let files; //all the files in the directory
        try {
            files = fs.readdirSync(path);
        } catch (e) {
            callback(e);
            return;
        }

        async.map(files, (file, cl) => {
            fs.stat(`${path}${file}`, (err, stats) => {
                if (err) {
                    cl(err);
                    return;
                } else {

                    if (stats.isFile()) {
                        this.loadExtension(`${path}${file}`);
                        cl();
                    } else if (stats.isDirectory()) {
                        if (file.startsWith('_')) {
                            cl();
                            return;
                        }
                        this.getExtensionsFromPath(`${path}${file}/`, () => {
                            cl();
                        });
                    }
                }
            });
        }, () => {
            callback();
        });
    }

    loadAllExtensions() {
        async.map(this.getExtensionsPaths(), (path, callback) => {
            this.getExtensionsFromPath(path, callback);
        }, (err, result) => {
            async.mapValues(this.extensions, (ext, key, cl) => {
                cl();
            }, () => {

                this.fire('extensionsLoaded');
            });
        });
    }

    loadExtension(path) {
        if (typeof path === 'string') {
            try {
                let tmp = require(path);
                if (tmp.prototype instanceof GuiExtension) {
                    let ext = new tmp(this.gui);
                    this.extensions[ext.constructor.name] = ext;
                    this.addExtension(this.extensions[ext.constructor.name]);
                }
            } catch (e) {
                console.log(e);
            }
        } else {
            console.log('trying to load non path extension');
        }
    }

    addTitle(title) {
        this.sidebar.list.addTitle(title);
    }

    addExtension(extension) {
        this.sidebar.addItem({
            id: extension.constructor.name,
            icon: extension.icon,
            title: extension.constructor.name,
            toggle: true,
            active: extension.active,
            onclick: {
                active: () => {
                    extension.activate();
                },
                deactive: () => {
                    extension.deactivate();
                }
            }
        });
        extension.on('show', () => {
            this.hide();
        });

        this.on('show', () => {
            extension.hide();
        });
    }

    show() {
        this.update();
        this.sidebar.show();
        super.show();
    }

    update() {
        let indx = 0;
        for (let i in this.extensions) {
            indx++;
            this.sidebar.list.removeItem(this.extensions[i].constructor.name);
            this.addExtension(this.extensions[i]);
        }
    }


    hideAllLoadedExtensions(){
      Object.keys(this.extensions).map((k)=>{
      this.extensions[k].hide();
      });
    }
}

module.exports = ExtensionsManager;
